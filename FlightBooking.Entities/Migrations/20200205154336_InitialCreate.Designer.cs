// <auto-generated />
using System;
using FlightBooking.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlightBooking.Entities.Migrations
{
    [DbContext(typeof(FlightDBContext))]
    [Migration("20200205154336_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlightBooking.Entities.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Atlanta, Georgia",
                            Country = "United States",
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 265, DateTimeKind.Local).AddTicks(6189),
                            Latitude = -29.832450000000001,
                            Longitude = 31.04034,
                            Name = "Hartsfield–Jackson Atlanta International Airport"
                        },
                        new
                        {
                            Id = 2,
                            City = "Roissy-en-France, Île-de-Franc",
                            Country = "France",
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 265, DateTimeKind.Local).AddTicks(8159),
                            Latitude = -0.83245000000000002,
                            Longitude = 31.04034,
                            Name = "Paris-Charles de Gaulle Airport"
                        },
                        new
                        {
                            Id = 3,
                            City = "Ōta, Tokyo",
                            Country = "Japan",
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 265, DateTimeKind.Local).AddTicks(8221),
                            Latitude = -51.397919999999999,
                            Longitude = -0.12084,
                            Name = "Tokyo Haneda Airport"
                        },
                        new
                        {
                            Id = 4,
                            City = "Garhoud, Dubai",
                            Country = "United Arab Emirates",
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 265, DateTimeKind.Local).AddTicks(8226),
                            Latitude = 77.216700000000003,
                            Longitude = 28.666699999999999,
                            Name = " Dubai International Airport"
                        },
                        new
                        {
                            Id = 5,
                            City = "Casablanca",
                            Country = "Morocco",
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 265, DateTimeKind.Local).AddTicks(8230),
                            Latitude = -34.832450000000001,
                            Longitude = 28.666699999999999,
                            Name = "Mohammed V Airport"
                        },
                        new
                        {
                            Id = 6,
                            City = "Mississauga, Ontario",
                            Country = "Canada",
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 265, DateTimeKind.Local).AddTicks(8234),
                            Latitude = 77.033299999999997,
                            Longitude = 77.033299999999997,
                            Name = "Toronto Pearson International Airport"
                        },
                        new
                        {
                            Id = 7,
                            City = "Barcelona",
                            Country = "Spain",
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 265, DateTimeKind.Local).AddTicks(8238),
                            Latitude = -28.466699999999999,
                            Longitude = -0.83245000000000002,
                            Name = "Barcelona–El Prat Airport"
                        });
                });

            modelBuilder.Entity("FlightBooking.Entities.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("FlightComsuption")
                        .HasColumnType("float");

                    b.Property<double>("FlightDuration")
                        .HasColumnType("float");

                    b.Property<int>("FlightFromId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FlightStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightToId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PlaneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightFromId");

                    b.HasIndex("FlightToId");

                    b.HasIndex("PlaneId");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("FlightBooking.Entities.Models.Plane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ComsumptionEffort")
                        .HasColumnType("float");

                    b.Property<double>("ComsumptionRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Plane");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComsumptionEffort = 123.0,
                            ComsumptionRate = 30.0,
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 261, DateTimeKind.Local).AddTicks(5201),
                            Name = "Wright Flyer",
                            Speed = 200.0
                        },
                        new
                        {
                            Id = 2,
                            ComsumptionEffort = 340.0,
                            ComsumptionRate = 50.0,
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 264, DateTimeKind.Local).AddTicks(2682),
                            Name = "Supermarine Spitfire",
                            Speed = 600.0
                        },
                        new
                        {
                            Id = 3,
                            ComsumptionEffort = 400.0,
                            ComsumptionRate = 100.0,
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 264, DateTimeKind.Local).AddTicks(2742),
                            Name = "Boeing 787",
                            Speed = 1000.0
                        },
                        new
                        {
                            Id = 4,
                            ComsumptionEffort = 300.0,
                            ComsumptionRate = 145.0,
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 264, DateTimeKind.Local).AddTicks(2748),
                            Name = "Learjet 23",
                            Speed = 450.0
                        },
                        new
                        {
                            Id = 5,
                            ComsumptionEffort = 140.0,
                            ComsumptionRate = 80.0,
                            CreationDate = new DateTime(2020, 2, 5, 16, 43, 36, 264, DateTimeKind.Local).AddTicks(2752),
                            Name = "Lockheed C-130",
                            Speed = 500.0
                        });
                });

            modelBuilder.Entity("FlightBooking.Entities.Models.Flight", b =>
                {
                    b.HasOne("FlightBooking.Entities.Models.Airport", "FlightFrom")
                        .WithMany("FlightFroms")
                        .HasForeignKey("FlightFromId")
                        .HasConstraintName("FK_FlightFrom_Airport")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Models.Airport", "FlightTo")
                        .WithMany("FlightTos")
                        .HasForeignKey("FlightToId")
                        .HasConstraintName("FK_FlightTo_Airport")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Models.Plane", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneId")
                        .HasConstraintName("FK_Flight_Plane")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
